// ==UserScript==
// @name         NB
// @namespace    http://tampermonkey.net/
// @version      2024-07-25
// @description  你好五代目!
// @license      MIT
// @author       cuiqimeng
// @match        https://zhsq-iot-uat-api.sunac.com.cn/
// @match        https://zhsq-iot-uat.sunac.com.cn/
// @match        https://zhsq-iot.sunac.com.cn/
// @icon         https://www.google.com/s2/favicons?sz=64&domain=sunac.com.cn
// @require      http://code.jquery.com/jquery-2.1.1.min.js
// @require      http://code.jquery.com/ui/1.11.0/jquery-ui.min.js
// require      https://www.jqueryscript.net/demo/DataTables-Jquery-Table-Plugin/media/js/jquery.dataTables.js
// @resource      https://cdn.bootcdn.net/ajax/libs/jqueryui/1.13.2/themes/base/jquery-ui.css
// @resource      https://www.jqueryscript.net/demo/DataTables-Jquery-Table-Plugin/media/css/jquery.dataTables_themeroller.css
// @grant        none
// ==/UserScript==

(function() {
  'use strict';
// @require      https://www.jqueryscript.net/demo/DataTables-Jquery-Table-Plugin/media/js/jquery.dataTables.js
  const cssStyle = document.createElement('link');
  cssStyle.rel = 'stylesheet';
  cssStyle.href = 'https://cdn.bootcdn.net/ajax/libs/jqueryui/1.13.2/themes/base/jquery-ui.css';
  document.head.appendChild(cssStyle);

  /**
   * NO_USE("未利用"),
   *
   * AGREE("同意"),
   * DISAGREE("不同意"),
   * AI_AGREE("AI同意"),
   * AI_DISAGREE("AI不同意"),
   *
   *
   *
   * APP_AGREE("APP同意"),
   * APP_DISAGREE("APP不同意"),
   * AI_APP_AGREE("AI_APP同意"),
   * AI_APP_DISAGREE("AI_APP不同意"),
   *
   *
   *
   * WEB_AGREE("WEB同意"),
   * WEB_DISAGREE("WEB不同意"),
   * AI_WEB_AGREE("AI_WEB同意"),
   * AI_WEB_DISAGREE("AI_WEB不同意"),
   * @type {{}}
   */
  const CONFIRM_MAP = {
    未利用: 'NO_USE',
    同意: 'AGREE',
    不同意: 'DISAGREE',
    AI同意: 'AI_AGREE',
    AI不同意: 'AI_DISAGREE',
    APP同意: 'APP_AGREE',
    APP不同意: 'APP_DISAGREE',
    AI_APP同意: 'AI_APP_AGREE',
    AI_APP不同意: 'AI_APP_DISAGREE',
    WEB同意: 'WEB_AGREE',
    WEB不同意: 'WEB_DISAGREE',
    AI_WEB同意: 'AI_WEB_AGREE',
    AI_WEB不同意: 'AI_WEB_DISAGREE',
  };

  // https://www.jqueryscript.net/demo/DataTables-Jquery-Table-Plugin/media/css/jquery.dataTables_themeroller.css
  const cssStyle2 = document.createElement('link');
  cssStyle2.rel = 'stylesheet';
  cssStyle2.href = 'https://www.jqueryscript.net/demo/DataTables-Jquery-Table-Plugin/media/css/jquery.dataTables_themeroller.css';
  document.head.appendChild(cssStyle2);
  let table = null;
  let store = {
    data: {},
    statstic: {
      data1: [],
      data2: [],
      data3: [],
      dataStat: {
        总数: 0,
        检出率: 0,
        覆盖率: 0,
        检出数: 0,
        人工数: 0,
        检准率: 0,
      }
    }
  };

  const expList = [];
  const start = [ 97, 84 ];
  for (let i = 0; i < 20; i++) {
    for (let j = 0; j < 20; j++) {
      expList.push([ (start[0] - 1 * i) / 100, (start[1] - 1 * j) / 100 ]);
    }
  }

  const ExpData = [
    [
      0.97,
      0.84,
      '7.06%',
      '97.15%'
    ],
    [
      0.97,
      0.83,
      '7.06%',
      '97.15%'
    ],
    [
      0.97,
      0.82,
      '7.06%',
      '97.15%'
    ],
    [
      0.97,
      0.81,
      '8.22%',
      '96.74%'
    ],
    [
      0.97,
      0.8,
      '8.22%',
      '96.74%'
    ],
    [
      0.97,
      0.79,
      '8.22%',
      '96.74%'
    ],
    [
      0.97,
      0.78,
      '8.96%',
      '97.01%'
    ],
    [
      0.97,
      0.77,
      '8.96%',
      '97.01%'
    ],
    [
      0.97,
      0.76,
      '8.96%',
      '97.01%'
    ],
    [
      0.97,
      0.75,
      '9.38%',
      '96.43%'
    ],
    [
      0.97,
      0.74,
      '9.38%',
      '96.43%'
    ],
    [
      0.97,
      0.73,
      '9.38%',
      '96.43%'
    ],
    [
      0.97,
      0.72,
      '9.38%',
      '96.43%'
    ],
    [
      0.97,
      0.71,
      '9.65%',
      '96.53%'
    ],
    [
      0.97,
      0.7,
      '9.65%',
      '96.53%'
    ],
    [
      0.97,
      0.69,
      '9.65%',
      '96.53%'
    ],
    [
      0.97,
      0.68,
      '9.85%',
      '96.60%'
    ],
    [
      0.97,
      0.67,
      '9.85%',
      '96.60%'
    ],
    [
      0.97,
      0.66,
      '9.85%',
      '96.60%'
    ],
    [
      0.97,
      0.65,
      '9.92%',
      '96.62%'
    ],
    [
      0.96,
      0.84,
      '9.05%',
      '97.04%'
    ],
    [
      0.96,
      0.83,
      '9.05%',
      '97.04%'
    ],
    [
      0.96,
      0.82,
      '9.05%',
      '97.04%'
    ],
    [
      0.96,
      0.81,
      '10.84%',
      '96.91%'
    ],
    [
      0.96,
      0.8,
      '10.84%',
      '96.91%'
    ],
    [
      0.96,
      0.79,
      '10.84%',
      '96.91%'
    ],
    [
      0.96,
      0.78,
      '12.02%',
      '97.21%'
    ],
    [
      0.96,
      0.77,
      '12.02%',
      '97.21%'
    ],
    [
      0.96,
      0.76,
      '12.02%',
      '97.21%'
    ],
    [
      0.96,
      0.75,
      '12.91%',
      '96.37%'
    ],
    [
      0.96,
      0.74,
      '12.91%',
      '96.37%'
    ],
    [
      0.96,
      0.73,
      '12.91%',
      '96.37%'
    ],
    [
      0.96,
      0.72,
      '12.91%',
      '96.37%'
    ],
    [
      0.96,
      0.71,
      '13.49%',
      '96.52%'
    ],
    [
      0.96,
      0.7,
      '13.49%',
      '96.52%'
    ],
    [
      0.96,
      0.69,
      '13.49%',
      '96.52%'
    ],
    [
      0.96,
      0.68,
      '13.96%',
      '96.64%'
    ],
    [
      0.96,
      0.67,
      '13.96%',
      '96.64%'
    ],
    [
      0.96,
      0.66,
      '13.96%',
      '96.64%'
    ],
    [
      0.96,
      0.65,
      '14.08%',
      '96.67%'
    ],
    [
      0.95,
      0.84,
      '10.79%',
      '96.48%'
    ],
    [
      0.95,
      0.83,
      '10.79%',
      '96.48%'
    ],
    [
      0.95,
      0.82,
      '10.79%',
      '96.48%'
    ],
    [
      0.95,
      0.81,
      '13.34%',
      '96.48%'
    ],
    [
      0.95,
      0.8,
      '13.34%',
      '96.48%'
    ],
    [
      0.95,
      0.79,
      '13.34%',
      '96.48%'
    ],
    [
      0.95,
      0.78,
      '15.26%',
      '96.63%'
    ],
    [
      0.95,
      0.77,
      '15.26%',
      '96.63%'
    ],
    [
      0.95,
      0.76,
      '15.26%',
      '96.63%'
    ],
    [
      0.95,
      0.75,
      '16.69%',
      '95.72%'
    ],
    [
      0.95,
      0.74,
      '16.69%',
      '95.72%'
    ],
    [
      0.95,
      0.73,
      '16.69%',
      '95.72%'
    ],
    [
      0.95,
      0.72,
      '16.69%',
      '95.72%'
    ],
    [
      0.95,
      0.71,
      '17.74%',
      '95.97%'
    ],
    [
      0.95,
      0.7,
      '17.74%',
      '95.97%'
    ],
    [
      0.95,
      0.69,
      '17.74%',
      '95.97%'
    ],
    [
      0.95,
      0.68,
      '18.50%',
      '96.01%'
    ],
    [
      0.95,
      0.67,
      '18.50%',
      '96.01%'
    ],
    [
      0.95,
      0.66,
      '18.50%',
      '96.01%'
    ],
    [
      0.95,
      0.65,
      '18.81%',
      '96.08%'
    ],
    [
      0.94,
      0.84,
      '12.11%',
      '96.49%'
    ],
    [
      0.94,
      0.83,
      '12.11%',
      '96.49%'
    ],
    [
      0.94,
      0.82,
      '12.11%',
      '96.49%'
    ],
    [
      0.94,
      0.81,
      '15.59%',
      '96.42%'
    ],
    [
      0.94,
      0.8,
      '15.59%',
      '96.42%'
    ],
    [
      0.94,
      0.79,
      '15.59%',
      '96.42%'
    ],
    [
      0.94,
      0.78,
      '18.28%',
      '96.58%'
    ],
    [
      0.94,
      0.77,
      '18.28%',
      '96.58%'
    ],
    [
      0.94,
      0.76,
      '18.28%',
      '96.58%'
    ],
    [
      0.94,
      0.75,
      '20.22%',
      '95.69%'
    ],
    [
      0.94,
      0.74,
      '20.22%',
      '95.69%'
    ],
    [
      0.94,
      0.73,
      '20.22%',
      '95.69%'
    ],
    [
      0.94,
      0.72,
      '20.22%',
      '95.69%'
    ],
    [
      0.94,
      0.71,
      '21.85%',
      '96.01%'
    ],
    [
      0.94,
      0.7,
      '21.85%',
      '96.01%'
    ],
    [
      0.94,
      0.69,
      '21.85%',
      '96.01%'
    ],
    [
      0.94,
      0.68,
      '22.99%',
      '95.92%'
    ],
    [
      0.94,
      0.67,
      '22.99%',
      '95.92%'
    ],
    [
      0.94,
      0.66,
      '22.99%',
      '95.92%'
    ],
    [
      0.94,
      0.65,
      '23.55%',
      '95.83%'
    ],
    [
      0.93,
      0.84,
      '12.96%',
      '96.55%'
    ],
    [
      0.93,
      0.83,
      '12.96%',
      '96.55%'
    ],
    [
      0.93,
      0.82,
      '12.96%',
      '96.55%'
    ],
    [
      0.93,
      0.81,
      '17.07%',
      '96.07%'
    ],
    [
      0.93,
      0.8,
      '17.07%',
      '96.07%'
    ],
    [
      0.93,
      0.79,
      '17.07%',
      '96.07%'
    ],
    [
      0.93,
      0.78,
      '20.44%',
      '96.39%'
    ],
    [
      0.93,
      0.77,
      '20.44%',
      '96.39%'
    ],
    [
      0.93,
      0.76,
      '20.44%',
      '96.39%'
    ],
    [
      0.93,
      0.75,
      '22.97%',
      '95.62%'
    ],
    [
      0.93,
      0.74,
      '22.97%',
      '95.62%'
    ],
    [
      0.93,
      0.73,
      '22.97%',
      '95.62%'
    ],
    [
      0.93,
      0.72,
      '22.97%',
      '95.62%'
    ],
    [
      0.93,
      0.71,
      '25.09%',
      '95.90%'
    ],
    [
      0.93,
      0.7,
      '25.09%',
      '95.90%'
    ],
    [
      0.93,
      0.69,
      '25.09%',
      '95.90%'
    ],
    [
      0.93,
      0.68,
      '26.70%',
      '95.65%'
    ],
    [
      0.93,
      0.67,
      '26.70%',
      '95.65%'
    ],
    [
      0.93,
      0.66,
      '26.70%',
      '95.65%'
    ],
    [
      0.93,
      0.65,
      '27.59%',
      '95.63%'
    ],
    [
      0.92,
      0.84,
      '13.45%',
      '96.51%'
    ],
    [
      0.92,
      0.83,
      '13.45%',
      '96.51%'
    ],
    [
      0.92,
      0.82,
      '13.45%',
      '96.51%'
    ],
    [
      0.92,
      0.81,
      '17.87%',
      '96.13%'
    ],
    [
      0.92,
      0.8,
      '17.87%',
      '96.13%'
    ],
    [
      0.92,
      0.79,
      '17.87%',
      '96.13%'
    ],
    [
      0.92,
      0.78,
      '21.89%',
      '96.53%'
    ],
    [
      0.92,
      0.77,
      '21.89%',
      '96.53%'
    ],
    [
      0.92,
      0.76,
      '21.89%',
      '96.53%'
    ],
    [
      0.92,
      0.75,
      '24.93%',
      '95.88%'
    ],
    [
      0.92,
      0.74,
      '24.93%',
      '95.88%'
    ],
    [
      0.92,
      0.73,
      '24.93%',
      '95.88%'
    ],
    [
      0.92,
      0.72,
      '24.93%',
      '95.88%'
    ],
    [
      0.92,
      0.71,
      '27.77%',
      '96.06%'
    ],
    [
      0.92,
      0.7,
      '27.77%',
      '96.06%'
    ],
    [
      0.92,
      0.69,
      '27.77%',
      '96.06%'
    ],
    [
      0.92,
      0.68,
      '29.92%',
      '95.89%'
    ],
    [
      0.92,
      0.67,
      '29.92%',
      '95.89%'
    ],
    [
      0.92,
      0.66,
      '29.92%',
      '95.89%'
    ],
    [
      0.92,
      0.65,
      '31.03%',
      '95.90%'
    ],
    [
      0.91,
      0.84,
      '13.90%',
      '96.30%'
    ],
    [
      0.91,
      0.83,
      '13.90%',
      '96.30%'
    ],
    [
      0.91,
      0.82,
      '13.90%',
      '96.30%'
    ],
    [
      0.91,
      0.81,
      '18.68%',
      '95.93%'
    ],
    [
      0.91,
      0.8,
      '18.68%',
      '95.93%'
    ],
    [
      0.91,
      0.79,
      '18.68%',
      '95.93%'
    ],
    [
      0.91,
      0.78,
      '23.26%',
      '96.35%'
    ],
    [
      0.91,
      0.77,
      '23.26%',
      '96.35%'
    ],
    [
      0.91,
      0.76,
      '23.26%',
      '96.35%'
    ],
    [
      0.91,
      0.75,
      '26.79%',
      '95.75%'
    ],
    [
      0.91,
      0.74,
      '26.79%',
      '95.75%'
    ],
    [
      0.91,
      0.73,
      '26.79%',
      '95.75%'
    ],
    [
      0.91,
      0.72,
      '26.79%',
      '95.75%'
    ],
    [
      0.91,
      0.71,
      '30.12%',
      '95.99%'
    ],
    [
      0.91,
      0.7,
      '30.12%',
      '95.99%'
    ],
    [
      0.91,
      0.69,
      '30.12%',
      '95.99%'
    ],
    [
      0.91,
      0.68,
      '32.62%',
      '95.89%'
    ],
    [
      0.91,
      0.67,
      '32.62%',
      '95.89%'
    ],
    [
      0.91,
      0.66,
      '32.62%',
      '95.89%'
    ],
    [
      0.91,
      0.65,
      '34.03%',
      '95.86%'
    ],
    [
      0.9,
      0.84,
      '14.12%',
      '96.20%'
    ],
    [
      0.9,
      0.83,
      '14.12%',
      '96.20%'
    ],
    [
      0.9,
      0.82,
      '14.12%',
      '96.20%'
    ],
    [
      0.9,
      0.81,
      '19.15%',
      '95.80%'
    ],
    [
      0.9,
      0.8,
      '19.15%',
      '95.80%'
    ],
    [
      0.9,
      0.79,
      '19.15%',
      '95.80%'
    ],
    [
      0.9,
      0.78,
      '23.93%',
      '96.27%'
    ],
    [
      0.9,
      0.77,
      '23.93%',
      '96.27%'
    ],
    [
      0.9,
      0.76,
      '23.93%',
      '96.27%'
    ],
    [
      0.9,
      0.75,
      '27.79%',
      '95.74%'
    ],
    [
      0.9,
      0.74,
      '27.79%',
      '95.74%'
    ],
    [
      0.9,
      0.73,
      '27.79%',
      '95.74%'
    ],
    [
      0.9,
      0.72,
      '27.79%',
      '95.74%'
    ],
    [
      0.9,
      0.71,
      '31.61%',
      '95.83%'
    ],
    [
      0.9,
      0.7,
      '31.61%',
      '95.83%'
    ],
    [
      0.9,
      0.69,
      '31.61%',
      '95.83%'
    ],
    [
      0.9,
      0.68,
      '34.61%',
      '95.80%'
    ],
    [
      0.9,
      0.67,
      '34.61%',
      '95.80%'
    ],
    [
      0.9,
      0.66,
      '34.61%',
      '95.80%'
    ],
    [
      0.9,
      0.65,
      '36.44%',
      '95.71%'
    ],
    [
      0.89,
      0.84,
      '14.41%',
      '96.12%'
    ],
    [
      0.89,
      0.83,
      '14.41%',
      '96.12%'
    ],
    [
      0.89,
      0.82,
      '14.41%',
      '96.12%'
    ],
    [
      0.89,
      0.81,
      '19.62%',
      '95.79%'
    ],
    [
      0.89,
      0.8,
      '19.62%',
      '95.79%'
    ],
    [
      0.89,
      0.79,
      '19.62%',
      '95.79%'
    ],
    [
      0.89,
      0.78,
      '24.64%',
      '96.28%'
    ],
    [
      0.89,
      0.77,
      '24.64%',
      '96.28%'
    ],
    [
      0.89,
      0.76,
      '24.64%',
      '96.28%'
    ],
    [
      0.89,
      0.75,
      '28.82%',
      '95.81%'
    ],
    [
      0.89,
      0.74,
      '28.82%',
      '95.81%'
    ],
    [
      0.89,
      0.73,
      '28.82%',
      '95.81%'
    ],
    [
      0.89,
      0.72,
      '28.82%',
      '95.81%'
    ],
    [
      0.89,
      0.71,
      '33.00%',
      '95.87%'
    ],
    [
      0.89,
      0.7,
      '33.00%',
      '95.87%'
    ],
    [
      0.89,
      0.69,
      '33.00%',
      '95.87%'
    ],
    [
      0.89,
      0.68,
      '36.46%',
      '95.89%'
    ],
    [
      0.89,
      0.67,
      '36.46%',
      '95.89%'
    ],
    [
      0.89,
      0.66,
      '36.46%',
      '95.89%'
    ],
    [
      0.89,
      0.65,
      '38.61%',
      '95.72%'
    ],
    [
      0.88,
      0.84,
      '14.52%',
      '96.15%'
    ],
    [
      0.88,
      0.83,
      '14.52%',
      '96.15%'
    ],
    [
      0.88,
      0.82,
      '14.52%',
      '96.15%'
    ],
    [
      0.88,
      0.81,
      '19.84%',
      '95.72%'
    ],
    [
      0.88,
      0.8,
      '19.84%',
      '95.72%'
    ],
    [
      0.88,
      0.79,
      '19.84%',
      '95.72%'
    ],
    [
      0.88,
      0.78,
      '24.98%',
      '96.24%'
    ],
    [
      0.88,
      0.77,
      '24.98%',
      '96.24%'
    ],
    [
      0.88,
      0.76,
      '24.98%',
      '96.24%'
    ],
    [
      0.88,
      0.75,
      '29.36%',
      '95.81%'
    ],
    [
      0.88,
      0.74,
      '29.36%',
      '95.81%'
    ],
    [
      0.88,
      0.73,
      '29.36%',
      '95.81%'
    ],
    [
      0.88,
      0.72,
      '29.36%',
      '95.81%'
    ],
    [
      0.88,
      0.71,
      '33.78%',
      '95.70%'
    ],
    [
      0.88,
      0.7,
      '33.78%',
      '95.70%'
    ],
    [
      0.88,
      0.69,
      '33.78%',
      '95.70%'
    ],
    [
      0.88,
      0.68,
      '37.53%',
      '95.71%'
    ],
    [
      0.88,
      0.67,
      '37.53%',
      '95.71%'
    ],
    [
      0.88,
      0.66,
      '37.53%',
      '95.71%'
    ],
    [
      0.88,
      0.65,
      '39.99%',
      '95.59%'
    ],
    [
      0.87,
      0.84,
      '14.59%',
      '96.17%'
    ],
    [
      0.87,
      0.83,
      '14.59%',
      '96.17%'
    ],
    [
      0.87,
      0.82,
      '14.59%',
      '96.17%'
    ],
    [
      0.87,
      0.81,
      '20.08%',
      '95.77%'
    ],
    [
      0.87,
      0.8,
      '20.08%',
      '95.77%'
    ],
    [
      0.87,
      0.79,
      '20.08%',
      '95.77%'
    ],
    [
      0.87,
      0.78,
      '25.36%',
      '96.21%'
    ],
    [
      0.87,
      0.77,
      '25.36%',
      '96.21%'
    ],
    [
      0.87,
      0.76,
      '25.36%',
      '96.21%'
    ],
    [
      0.87,
      0.75,
      '30.14%',
      '95.70%'
    ],
    [
      0.87,
      0.74,
      '30.14%',
      '95.70%'
    ],
    [
      0.87,
      0.73,
      '30.14%',
      '95.70%'
    ],
    [
      0.87,
      0.72,
      '30.14%',
      '95.70%'
    ],
    [
      0.87,
      0.71,
      '34.79%',
      '95.63%'
    ],
    [
      0.87,
      0.7,
      '34.79%',
      '95.63%'
    ],
    [
      0.87,
      0.69,
      '34.79%',
      '95.63%'
    ],
    [
      0.87,
      0.68,
      '38.81%',
      '95.68%'
    ],
    [
      0.87,
      0.67,
      '38.81%',
      '95.68%'
    ],
    [
      0.87,
      0.66,
      '38.81%',
      '95.68%'
    ],
    [
      0.87,
      0.65,
      '41.49%',
      '95.53%'
    ],
    [
      0.86,
      0.84,
      '14.63%',
      '96.03%'
    ],
    [
      0.86,
      0.83,
      '14.63%',
      '96.03%'
    ],
    [
      0.86,
      0.82,
      '14.63%',
      '96.03%'
    ],
    [
      0.86,
      0.81,
      '20.17%',
      '95.68%'
    ],
    [
      0.86,
      0.8,
      '20.17%',
      '95.68%'
    ],
    [
      0.86,
      0.79,
      '20.17%',
      '95.68%'
    ],
    [
      0.86,
      0.78,
      '25.65%',
      '96.17%'
    ],
    [
      0.86,
      0.77,
      '25.65%',
      '96.17%'
    ],
    [
      0.86,
      0.76,
      '25.65%',
      '96.17%'
    ],
    [
      0.86,
      0.75,
      '30.63%',
      '95.70%'
    ],
    [
      0.86,
      0.74,
      '30.63%',
      '95.70%'
    ],
    [
      0.86,
      0.73,
      '30.63%',
      '95.70%'
    ],
    [
      0.86,
      0.72,
      '30.63%',
      '95.70%'
    ],
    [
      0.86,
      0.71,
      '35.50%',
      '95.66%'
    ],
    [
      0.86,
      0.7,
      '35.50%',
      '95.66%'
    ],
    [
      0.86,
      0.69,
      '35.50%',
      '95.66%'
    ],
    [
      0.86,
      0.68,
      '39.90%',
      '95.74%'
    ],
    [
      0.86,
      0.67,
      '39.90%',
      '95.74%'
    ],
    [
      0.86,
      0.66,
      '39.90%',
      '95.74%'
    ],
    [
      0.86,
      0.65,
      '42.94%',
      '95.63%'
    ],
    [
      0.85,
      0.84,
      '14.72%',
      '96.05%'
    ],
    [
      0.85,
      0.83,
      '14.72%',
      '96.05%'
    ],
    [
      0.85,
      0.82,
      '14.72%',
      '96.05%'
    ],
    [
      0.85,
      0.81,
      '20.38%',
      '95.61%'
    ],
    [
      0.85,
      0.8,
      '20.38%',
      '95.61%'
    ],
    [
      0.85,
      0.79,
      '20.38%',
      '95.61%'
    ],
    [
      0.85,
      0.78,
      '25.94%',
      '96.12%'
    ],
    [
      0.85,
      0.77,
      '25.94%',
      '96.12%'
    ],
    [
      0.85,
      0.76,
      '25.94%',
      '96.12%'
    ],
    [
      0.85,
      0.75,
      '31.17%',
      '95.70%'
    ],
    [
      0.85,
      0.74,
      '31.17%',
      '95.70%'
    ],
    [
      0.85,
      0.73,
      '31.17%',
      '95.70%'
    ],
    [
      0.85,
      0.72,
      '31.17%',
      '95.70%'
    ],
    [
      0.85,
      0.71,
      '36.28%',
      '95.69%'
    ],
    [
      0.85,
      0.7,
      '36.28%',
      '95.69%'
    ],
    [
      0.85,
      0.69,
      '36.28%',
      '95.69%'
    ],
    [
      0.85,
      0.68,
      '41.00%',
      '95.75%'
    ],
    [
      0.85,
      0.67,
      '41.00%',
      '95.75%'
    ],
    [
      0.85,
      0.66,
      '41.00%',
      '95.75%'
    ],
    [
      0.85,
      0.65,
      '44.30%',
      '95.61%'
    ],
    [
      0.84,
      0.84,
      '14.77%',
      '95.92%'
    ],
    [
      0.84,
      0.83,
      '14.77%',
      '95.92%'
    ],
    [
      0.84,
      0.82,
      '14.77%',
      '95.92%'
    ],
    [
      0.84,
      0.81,
      '20.46%',
      '95.52%'
    ],
    [
      0.84,
      0.8,
      '20.46%',
      '95.52%'
    ],
    [
      0.84,
      0.79,
      '20.46%',
      '95.52%'
    ],
    [
      0.84,
      0.78,
      '26.09%',
      '96.06%'
    ],
    [
      0.84,
      0.77,
      '26.09%',
      '96.06%'
    ],
    [
      0.84,
      0.76,
      '26.09%',
      '96.06%'
    ],
    [
      0.84,
      0.75,
      '31.41%',
      '95.66%'
    ],
    [
      0.84,
      0.74,
      '31.41%',
      '95.66%'
    ],
    [
      0.84,
      0.73,
      '31.41%',
      '95.66%'
    ],
    [
      0.84,
      0.72,
      '31.41%',
      '95.66%'
    ],
    [
      0.84,
      0.71,
      '36.68%',
      '95.68%'
    ],
    [
      0.84,
      0.7,
      '36.68%',
      '95.68%'
    ],
    [
      0.84,
      0.69,
      '36.68%',
      '95.68%'
    ],
    [
      0.84,
      0.68,
      '41.49%',
      '95.75%'
    ],
    [
      0.84,
      0.67,
      '41.49%',
      '95.75%'
    ],
    [
      0.84,
      0.66,
      '41.49%',
      '95.75%'
    ],
    [
      0.84,
      0.65,
      '45.06%',
      '95.59%'
    ],
    [
      0.83,
      0.84,
      '14.81%',
      '95.93%'
    ],
    [
      0.83,
      0.83,
      '14.81%',
      '95.93%'
    ],
    [
      0.83,
      0.82,
      '14.81%',
      '95.93%'
    ],
    [
      0.83,
      0.81,
      '20.55%',
      '95.54%'
    ],
    [
      0.83,
      0.8,
      '20.55%',
      '95.54%'
    ],
    [
      0.83,
      0.79,
      '20.55%',
      '95.54%'
    ],
    [
      0.83,
      0.78,
      '26.25%',
      '96.09%'
    ],
    [
      0.83,
      0.77,
      '26.25%',
      '96.09%'
    ],
    [
      0.83,
      0.76,
      '26.25%',
      '96.09%'
    ],
    [
      0.83,
      0.75,
      '31.70%',
      '95.70%'
    ],
    [
      0.83,
      0.74,
      '31.70%',
      '95.70%'
    ],
    [
      0.83,
      0.73,
      '31.70%',
      '95.70%'
    ],
    [
      0.83,
      0.72,
      '31.70%',
      '95.70%'
    ],
    [
      0.83,
      0.71,
      '37.20%',
      '95.68%'
    ],
    [
      0.83,
      0.7,
      '37.20%',
      '95.68%'
    ],
    [
      0.83,
      0.69,
      '37.20%',
      '95.68%'
    ],
    [
      0.83,
      0.68,
      '42.20%',
      '95.71%'
    ],
    [
      0.83,
      0.67,
      '42.20%',
      '95.71%'
    ],
    [
      0.83,
      0.66,
      '42.20%',
      '95.71%'
    ],
    [
      0.83,
      0.65,
      '46.02%',
      '95.58%'
    ],
    [
      0.82,
      0.84,
      '14.83%',
      '95.93%'
    ],
    [
      0.82,
      0.83,
      '14.83%',
      '95.93%'
    ],
    [
      0.82,
      0.82,
      '14.83%',
      '95.93%'
    ],
    [
      0.82,
      0.81,
      '20.60%',
      '95.55%'
    ],
    [
      0.82,
      0.8,
      '20.60%',
      '95.55%'
    ],
    [
      0.82,
      0.79,
      '20.60%',
      '95.55%'
    ],
    [
      0.82,
      0.78,
      '26.36%',
      '96.10%'
    ],
    [
      0.82,
      0.77,
      '26.36%',
      '96.10%'
    ],
    [
      0.82,
      0.76,
      '26.36%',
      '96.10%'
    ],
    [
      0.82,
      0.75,
      '31.84%',
      '95.72%'
    ],
    [
      0.82,
      0.74,
      '31.84%',
      '95.72%'
    ],
    [
      0.82,
      0.73,
      '31.84%',
      '95.72%'
    ],
    [
      0.82,
      0.72,
      '31.84%',
      '95.72%'
    ],
    [
      0.82,
      0.71,
      '37.44%',
      '95.64%'
    ],
    [
      0.82,
      0.7,
      '37.44%',
      '95.64%'
    ],
    [
      0.82,
      0.69,
      '37.44%',
      '95.64%'
    ],
    [
      0.82,
      0.68,
      '42.52%',
      '95.69%'
    ],
    [
      0.82,
      0.67,
      '42.52%',
      '95.69%'
    ],
    [
      0.82,
      0.66,
      '42.52%',
      '95.69%'
    ],
    [
      0.82,
      0.65,
      '46.58%',
      '95.49%'
    ],
    [
      0.81,
      0.84,
      '14.86%',
      '95.94%'
    ],
    [
      0.81,
      0.83,
      '14.86%',
      '95.94%'
    ],
    [
      0.81,
      0.82,
      '14.86%',
      '95.94%'
    ],
    [
      0.81,
      0.81,
      '20.62%',
      '95.56%'
    ],
    [
      0.81,
      0.8,
      '20.62%',
      '95.56%'
    ],
    [
      0.81,
      0.79,
      '20.62%',
      '95.56%'
    ],
    [
      0.81,
      0.78,
      '26.43%',
      '96.11%'
    ],
    [
      0.81,
      0.77,
      '26.43%',
      '96.11%'
    ],
    [
      0.81,
      0.76,
      '26.43%',
      '96.11%'
    ],
    [
      0.81,
      0.75,
      '32.02%',
      '95.67%'
    ],
    [
      0.81,
      0.74,
      '32.02%',
      '95.67%'
    ],
    [
      0.81,
      0.73,
      '32.02%',
      '95.67%'
    ],
    [
      0.81,
      0.72,
      '32.02%',
      '95.67%'
    ],
    [
      0.81,
      0.71,
      '37.76%',
      '95.50%'
    ],
    [
      0.81,
      0.7,
      '37.76%',
      '95.50%'
    ],
    [
      0.81,
      0.69,
      '37.76%',
      '95.50%'
    ],
    [
      0.81,
      0.68,
      '43.05%',
      '95.54%'
    ],
    [
      0.81,
      0.67,
      '43.05%',
      '95.54%'
    ],
    [
      0.81,
      0.66,
      '43.05%',
      '95.54%'
    ],
    [
      0.81,
      0.65,
      '47.18%',
      '95.31%'
    ],
    [
      0.8,
      0.84,
      '14.92%',
      '95.96%'
    ],
    [
      0.8,
      0.83,
      '14.92%',
      '95.96%'
    ],
    [
      0.8,
      0.82,
      '14.92%',
      '95.96%'
    ],
    [
      0.8,
      0.81,
      '20.69%',
      '95.57%'
    ],
    [
      0.8,
      0.8,
      '20.69%',
      '95.57%'
    ],
    [
      0.8,
      0.79,
      '20.69%',
      '95.57%'
    ],
    [
      0.8,
      0.78,
      '26.52%',
      '96.12%'
    ],
    [
      0.8,
      0.77,
      '26.52%',
      '96.12%'
    ],
    [
      0.8,
      0.76,
      '26.52%',
      '96.12%'
    ],
    [
      0.8,
      0.75,
      '32.17%',
      '95.69%'
    ],
    [
      0.8,
      0.74,
      '32.17%',
      '95.69%'
    ],
    [
      0.8,
      0.73,
      '32.17%',
      '95.69%'
    ],
    [
      0.8,
      0.72,
      '32.17%',
      '95.69%'
    ],
    [
      0.8,
      0.71,
      '38.05%',
      '95.48%'
    ],
    [
      0.8,
      0.7,
      '38.05%',
      '95.48%'
    ],
    [
      0.8,
      0.69,
      '38.05%',
      '95.48%'
    ],
    [
      0.8,
      0.68,
      '43.57%',
      '95.54%'
    ],
    [
      0.8,
      0.67,
      '43.57%',
      '95.54%'
    ],
    [
      0.8,
      0.66,
      '43.57%',
      '95.54%'
    ],
    [
      0.8,
      0.65,
      '47.79%',
      '95.28%'
    ],
    [
      0.79,
      0.84,
      '14.92%',
      '95.96%'
    ],
    [
      0.79,
      0.83,
      '14.92%',
      '95.96%'
    ],
    [
      0.79,
      0.82,
      '14.92%',
      '95.96%'
    ],
    [
      0.79,
      0.81,
      '20.69%',
      '95.57%'
    ],
    [
      0.79,
      0.8,
      '20.69%',
      '95.57%'
    ],
    [
      0.79,
      0.79,
      '20.69%',
      '95.57%'
    ],
    [
      0.79,
      0.78,
      '26.54%',
      '96.13%'
    ],
    [
      0.79,
      0.77,
      '26.54%',
      '96.13%'
    ],
    [
      0.79,
      0.76,
      '26.54%',
      '96.13%'
    ],
    [
      0.79,
      0.75,
      '32.24%',
      '95.70%'
    ],
    [
      0.79,
      0.74,
      '32.24%',
      '95.70%'
    ],
    [
      0.79,
      0.73,
      '32.24%',
      '95.70%'
    ],
    [
      0.79,
      0.72,
      '32.24%',
      '95.70%'
    ],
    [
      0.79,
      0.71,
      '38.20%',
      '95.50%'
    ],
    [
      0.79,
      0.7,
      '38.20%',
      '95.50%'
    ],
    [
      0.79,
      0.69,
      '38.20%',
      '95.50%'
    ],
    [
      0.79,
      0.68,
      '43.74%',
      '95.56%'
    ],
    [
      0.79,
      0.67,
      '43.74%',
      '95.56%'
    ],
    [
      0.79,
      0.66,
      '43.74%',
      '95.56%'
    ],
    [
      0.79,
      0.65,
      '48.08%',
      '95.31%'
    ],
    [
      0.78,
      0.84,
      '14.92%',
      '95.96%'
    ],
    [
      0.78,
      0.83,
      '14.92%',
      '95.96%'
    ],
    [
      0.78,
      0.82,
      '14.92%',
      '95.96%'
    ],
    [
      0.78,
      0.81,
      '20.71%',
      '95.58%'
    ],
    [
      0.78,
      0.8,
      '20.71%',
      '95.58%'
    ],
    [
      0.78,
      0.79,
      '20.71%',
      '95.58%'
    ],
    [
      0.78,
      0.78,
      '26.56%',
      '96.13%'
    ],
    [
      0.78,
      0.77,
      '26.56%',
      '96.13%'
    ],
    [
      0.78,
      0.76,
      '26.56%',
      '96.13%'
    ],
    [
      0.78,
      0.75,
      '32.31%',
      '95.71%'
    ],
    [
      0.78,
      0.74,
      '32.31%',
      '95.71%'
    ],
    [
      0.78,
      0.73,
      '32.31%',
      '95.71%'
    ],
    [
      0.78,
      0.72,
      '32.31%',
      '95.71%'
    ],
    [
      0.78,
      0.71,
      '38.36%',
      '95.52%'
    ],
    [
      0.78,
      0.7,
      '38.36%',
      '95.52%'
    ],
    [
      0.78,
      0.69,
      '38.36%',
      '95.52%'
    ],
    [
      0.78,
      0.68,
      '43.92%',
      '95.57%'
    ],
    [
      0.78,
      0.67,
      '43.92%',
      '95.57%'
    ],
    [
      0.78,
      0.66,
      '43.92%',
      '95.57%'
    ],
    [
      0.78,
      0.65,
      '48.35%',
      '95.29%'
    ]
  ];

  const globalConfig = window.httpConfig || {
    apiServer: '',
    cmServer: '',
    sassServer: '',
    accessTokenName: 'accessToken',
    refreshTokenName: 'refreshToken',
    expireInName: 'expireIn',
    loginTimestampName: 'loginTimestamp',
    sassApiStage: 'TEST',

    tokenExpiredHandler: () => {
    },
    noTokenWhiteList: [ 'corp_auth', 'corp_register', 'corp/token/refresh' ],
    allHttps: []
  };

  const apiHost = location.origin.includes('uat') ? 'https://zhsq-iot-uat-api2.sunac.com.cn' : 'https://zhsq-iot-api2.sunac.com.cn';
  const headers = () => ({
    GROUP: 'VIDEO-PLATFORM',
    STAGE: globalConfig.sassApiStage,
    'content-type': 'application/json;charset=UTF-8',
    'Access-Control-Allow-Origin': '*',
    'access-token': window.localStorage.getItem('accessToken')
  });

  const guideHtml = `
<div class="cuisini-mask">
  <div class="cuisini-content"></div>
</div>
<div class="cuisini-tips">
  <div class="cuisini-close">
      <svg style="vertical-align: middle;overflow: hidden;" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
          <path d="M9.95317 8.73169L15.5511 3.13376C15.7138 2.97104 15.9776 2.97104 16.1403 3.13376L16.7296 3.72301C16.8923 3.88573 16.8923 4.14955 16.7296 4.31227L11.1317 9.9102L16.7296 15.5081C16.8923 15.6708 16.8923 15.9347 16.7296 16.0974L16.1403 16.6866C15.9776 16.8494 15.7138 16.8494 15.5511 16.6866L9.95317 11.0887L4.35524 16.6866C4.19252 16.8494 3.9287 16.8494 3.76598 16.6866L3.17673 16.0974C3.01401 15.9347 3.01401 15.6708 3.17673 15.5081L8.77465 9.9102L3.17673 4.31227C3.01401 4.14955 3.01401 3.88573 3.17673 3.72301L3.76598 3.13376C3.9287 2.97104 4.19252 2.97104 4.35524 3.13376L9.95317 8.73169Z" fill="#ffffff"></path>
          </svg>
  </div>

  <div class="cuisini-title"> 🌟 遇见问题，不再有障碍！</div>
  <p>你好，我是你的智能小助手。<br/>
      点我，开启高效解答模式，让问题变成过去式。</p>
  <div class="cuisini-button">
      <button>我知道了</button>
  </div>
  <span class="cuisini-arrow" ></span>
</div>
`;
  const chatButtonHtml =
    `<div class="cuisini-chat-button" ><svg style="vertical-align: middle;overflow: hidden;" width="48" height="56" viewBox="0 0 48 56" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_349_49711)">
<path d="M8 24C8 12.9543 16.9543 4 28 4H48V44H28C16.9543 44 8 35.0457 8 24Z" fill="url(#paint0_linear_349_49711)"/>
</g>
<path d="M31.2632 30.2754H28.1992L27.0636 31.411C26.9971 31.4775 26.9518 31.5623 26.9335 31.6546C26.9151 31.7468 26.9245 31.8425 26.9605 31.9294C26.9965 32.0163 27.0575 32.0906 27.1357 32.1429C27.2139 32.1951 27.3059 32.223 27.4 32.223H32.0625C32.1566 32.223 32.2486 32.1951 32.3268 32.1429C32.405 32.0906 32.466 32.0163 32.502 31.9294C32.538 31.8425 32.5474 31.7468 32.529 31.6546C32.5107 31.5623 32.4654 31.4775 32.3989 31.411L31.2632 30.2754Z" fill="white"/>
<path d="M39.6831 21.3652H39.0791V25.6142H39.6831C39.8051 25.6142 39.9221 25.5657 40.0083 25.4795C40.0945 25.3932 40.143 25.2763 40.143 25.1543V21.8251C40.143 21.7031 40.0945 21.5862 40.0083 21.4999C39.9221 21.4137 39.8051 21.3652 39.6831 21.3652Z" fill="white"/>
<path d="M20.9208 21.3652H20.3168C20.1948 21.3652 20.0779 21.4137 19.9916 21.4999C19.9054 21.5862 19.8569 21.7031 19.8569 21.8251V25.1543C19.8569 25.2763 19.9054 25.3932 19.9916 25.4795C20.0779 25.5657 20.1948 25.6142 20.3168 25.6142H20.9208V21.3652Z" fill="white"/>
<path d="M32.3323 21.9277C32.1041 21.9277 31.8854 22.0184 31.7241 22.1796C31.5628 22.3409 31.4722 22.5597 31.4722 22.7878V23.4045C31.4722 23.6326 31.5628 23.8514 31.7241 24.0127C31.8854 24.174 32.1042 24.2646 32.3323 24.2646C32.5604 24.2646 32.7792 24.174 32.9405 24.0127C33.1018 23.8514 33.1924 23.6326 33.1924 23.4045V22.7878C33.1924 22.6749 33.1702 22.563 33.1269 22.4587C33.0837 22.3543 33.0204 22.2595 32.9405 22.1796C32.8606 22.0998 32.7658 22.0364 32.6614 21.9932C32.5571 21.95 32.4452 21.9277 32.3323 21.9277Z" fill="white"/>
<path d="M27.8464 21.9277C27.6183 21.9277 27.3995 22.0184 27.2382 22.1796C27.0769 22.3409 26.9863 22.5597 26.9863 22.7878V23.4045C26.9863 23.6326 27.0769 23.8514 27.2383 24.0127C27.3996 24.174 27.6183 24.2646 27.8465 24.2646C28.0746 24.2646 28.2933 24.174 28.4547 24.0127C28.616 23.8514 28.7066 23.6326 28.7066 23.4045V22.7878C28.7066 22.6749 28.6843 22.563 28.6411 22.4587C28.5979 22.3543 28.5345 22.2595 28.4546 22.1796C28.3748 22.0998 28.2799 22.0364 28.1756 21.9932C28.0712 21.95 27.9594 21.9277 27.8464 21.9277Z" fill="white"/>
<path d="M35.2258 17.0488H24.7738C23.8508 17.0499 22.9659 17.417 22.3133 18.0696C21.6606 18.7223 21.2935 19.6071 21.2925 20.5301V26.4227C21.2935 27.3457 21.6606 28.2306 22.3133 28.8832C22.9659 29.5359 23.8508 29.903 24.7738 29.904H35.2258C36.1488 29.903 37.0336 29.5359 37.6863 28.8832C38.3389 28.2306 38.7061 27.3457 38.7071 26.4227V20.5301C38.7061 19.6071 38.3389 18.7223 37.6863 18.0696C37.0336 17.417 36.1488 17.0499 35.2258 17.0488ZM35.5181 26.3875C35.5181 26.5538 35.452 26.7133 35.3344 26.8309C35.2168 26.9485 35.0573 27.0146 34.891 27.0146H29.7929C29.0215 27.0146 28.2631 27.2129 27.5904 27.5903L25.8801 28.55V27.0146H25.1086C24.9422 27.0146 24.7827 26.9486 24.6651 26.831C24.5475 26.7134 24.4815 26.5539 24.4815 26.3876V20.1408C24.4815 19.9745 24.5475 19.815 24.6651 19.6974C24.7827 19.5798 24.9422 19.5137 25.1086 19.5137H34.891C35.0573 19.5137 35.2168 19.5798 35.3344 19.6974C35.452 19.815 35.5181 19.9745 35.5181 20.1408V26.3875Z" fill="white"/>
<defs>
<filter id="filter0_d_349_49711" x="0" y="0" width="56" height="56" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="4"/>
<feGaussianBlur stdDeviation="4"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.168627 0 0 0 0 0.372549 0 0 0 0 0.85098 0 0 0 0.24 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_349_49711"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_349_49711" result="shape"/>
</filter>
<linearGradient id="paint0_linear_349_49711" x1="48" y1="25.6667" x2="8" y2="25.6667" gradientUnits="userSpaceOnUse">
<stop stop-color="#9258F7"/>
<stop offset="1" stop-color="#3370FF"/>
</linearGradient>
</defs>
</svg>

</div>`;


  const getChatContainerHtml = (protocol, host, token) => {
    return `<div id="cuisini-chat-container" style="padding: 20px">
<div>
<div class="cuisini-top-bar">
<label for="from">从</label>
<input type="text" placeholder="开始日期" id="datepicker-b" name="from">
<label for="to">到</label>
<input type="text" placeholder="结束日期" id="datepicker-e" name="to">
<button id="cuisini-search-btn">查询</button>
</div>
<div style="font-weight: bold;margin-top: 8px">
</div>
<div class="cuisini-content">
    <table id="mainTable" class="display" cellspacing="0" width="100%">
    <thead>
        <tr>
            <th>cosine</th>
            <th>phash</th>
            <th>检出数</th>
            <th>检出率</th>
            <th>理论检准率</th>
            <th>操作</th>
        </tr>
    </thead>
    <tfoot>
        <tr>
            <th>cosine</th>
            <th>phash</th>
            <th>检出数</th>
            <th>检出率</th>
            <th>理论检准率</th>
            <th>操作</th>
        </tr>
    </tfoot>
    <tbody>
    </tbody>
    </table>
     <div style="margin: 4px 0;">
          <button id="copy-stat">复制excel数据</button>
          <a target="_blank" href="https://sunac.feishu.cn/sheets/EX30sqzc4hTohSto3OdcthPEnyf?sheet=bcddb9">跳转Excel</a>
     </div>
    <div class="cuisini-stat">
      <div class="el-descriptions" style="margin: 8px 0;">
        <div class="el-descriptions__body" style="background: transparent">
          <table id="stat-table" class="el-descriptions__table">
            <tbody>
            </tbody>
          </table>
        </div>
      </div>
      <div style="display: flex">
       <div style="flex: 1;max-height: 200px;overflow: auto;position: relative;">
          <button id="copy-wdm" style="position: absolute; top: 2px; right: 20px;">我要汇报</button>
          <ul id="cuisini-stat-wdm"></ul>
       </div>
      </div>
    </div>
</div>

</div>
<div class="cuisini-operate"><div class="cuisini-closeviewport cuisini-viewportnone"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
<path d="M7.507 11.6645C7.73712 11.6645 7.94545 11.7578 8.09625 11.9086C8.24706 12.0594 8.34033 12.2677 8.34033 12.4978V16.7976C8.34033 17.0277 8.15378 17.2143 7.92366 17.2143H7.09033C6.86021 17.2143 6.67366 17.0277 6.67366 16.7976V14.5812L3.41075 17.843C3.24803 18.0057 2.98421 18.0057 2.82149 17.843L2.23224 17.2537C2.06952 17.091 2.06952 16.8272 2.23224 16.6645L5.56668 13.3311H3.19634C2.96622 13.3311 2.77967 13.1446 2.77967 12.9145V12.0811C2.77967 11.851 2.96622 11.6645 3.19634 11.6645H7.507ZM16.5991 2.1572C16.7619 1.99448 17.0257 1.99448 17.1884 2.1572L17.7777 2.74645C17.9404 2.90917 17.9404 3.17299 17.7777 3.33571L14.4432 6.66904H16.8136C17.0437 6.66904 17.2302 6.85559 17.2302 7.08571V7.91904C17.2302 8.14916 17.0437 8.33571 16.8136 8.33571H12.5029C12.2728 8.33571 12.0644 8.24243 11.9136 8.09163C11.7628 7.94082 11.6696 7.73249 11.6696 7.50237V3.20257C11.6696 2.97245 11.8561 2.7859 12.0862 2.7859H12.9196C13.1497 2.7859 13.3362 2.97245 13.3362 3.20257V5.419L16.5991 2.1572Z" fill="#646A73"/>
</svg></div>
<div class="cuisini-openviewport">
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
<path d="M7.15209 11.5968C7.31481 11.4341 7.57862 11.4341 7.74134 11.5968L8.3306 12.186C8.49332 12.3487 8.49332 12.6126 8.3306 12.7753L4.99615 16.1086H7.3665C7.59662 16.1086 7.78316 16.2952 7.78316 16.5253V17.3586C7.78316 17.5887 7.59662 17.7753 7.3665 17.7753H3.05584C2.82572 17.7753 2.61738 17.682 2.46658 17.5312C2.31578 17.3804 2.2225 17.1721 2.2225 16.9419V12.6421C2.2225 12.412 2.40905 12.2255 2.63917 12.2255H3.4725C3.70262 12.2255 3.88917 12.412 3.88917 12.6421V14.8586L7.15209 11.5968ZM16.937 2.22217C17.1671 2.22217 17.3754 2.31544 17.5262 2.46625C17.677 2.61705 17.7703 2.82538 17.7703 3.0555V7.35531C17.7703 7.58543 17.5837 7.77198 17.3536 7.77198H16.5203C16.2902 7.77198 16.1036 7.58543 16.1036 7.35531V5.13888L12.8407 8.40068C12.678 8.5634 12.4142 8.5634 12.2515 8.40068L11.6622 7.81142C11.4995 7.64871 11.4995 7.38489 11.6622 7.22217L14.9966 3.88883H12.6263C12.3962 3.88883 12.2096 3.70229 12.2096 3.47217V2.63883C12.2096 2.40872 12.3962 2.22217 12.6263 2.22217H16.937Z" fill="#646A73"/>
</svg></div>
<div class="cuisini-chat-close"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
           <path d="M9.95317 8.73169L15.5511 3.13376C15.7138 2.97104 15.9776 2.97104 16.1403 3.13376L16.7296 3.72301C16.8923 3.88573 16.8923 4.14955 16.7296 4.31227L11.1317 9.9102L16.7296 15.5081C16.8923 15.6708 16.8923 15.9347 16.7296 16.0974L16.1403 16.6866C15.9776 16.8494 15.7138 16.8494 15.5511 16.6866L9.95317 11.0887L4.35524 16.6866C4.19252 16.8494 3.9287 16.8494 3.76598 16.6866L3.17673 16.0974C3.01401 15.9347 3.01401 15.6708 3.17673 15.5081L8.77465 9.9102L3.17673 4.31227C3.01401 4.14955 3.01401 3.88573 3.17673 3.72301L3.76598 3.13376C3.9287 2.97104 4.19252 2.97104 4.35524 3.13376L9.95317 8.73169Z" fill="#646A73"/>
           </svg>
 </div></div>
`;
  };

  function formatDate(date = new Date()) {
    var year = date.getFullYear();
    var month = ('0' + (date.getMonth() + 1)).slice(-2); // getMonth()返回0-11,所以需要+1
    var day = ('0' + date.getDate()).slice(-2);
    return year + '-' + month + '-' + day;
  }

  /**
   * 初始化引导
   * @param {*} root
   */
  const initGuide = (root) => {
    root.insertAdjacentHTML('beforeend', guideHtml);
    const button = root.querySelector('.cuisini-button');
    const close_icon = root.querySelector('.cuisini-close');
    const close_func = () => {
      root.removeChild(root.querySelector('.cuisini-tips'));
      root.removeChild(root.querySelector('.cuisini-mask'));
      localStorage.setItem('cuisiniMaskTip', true);
    };
    button.onclick = close_func;
    close_icon.onclick = close_func;
  };
  const initChat = (root) => {
    // 添加对话icon
    root.insertAdjacentHTML('beforeend', chatButtonHtml);
    // 添加对话框
    root.insertAdjacentHTML('beforeend', getChatContainerHtml('https', 'zhsq-iot-uat-api.sunac.com.cn/ai-proxy', '04c1cf4826a01f94'));
    // 按钮元素
    const chat_button = root.querySelector('.cuisini-chat-button');
    //  对话框元素
    const chat_container = root.querySelector('#cuisini-chat-container');

    const viewport = root.querySelector('.cuisini-openviewport');
    const closeviewport = root.querySelector('.cuisini-closeviewport');
    const close_func = () => {
      chat_container.style['display'] = chat_container.style['display'] == 'block' ? 'none' : 'block';
      chat_button.style['display'] = chat_container.style['display'] == 'block' ? 'none' : 'block';
    };
    const close_icon = chat_container.querySelector('.cuisini-chat-close');
    chat_button.onclick = close_func;
    close_icon.onclick = close_func;
    const viewport_func = () => {
      if (chat_container.classList.contains('cuisini-enlarge')) {
        chat_container.classList.remove('cuisini-enlarge');
        viewport.classList.remove('cuisini-viewportnone');
        closeviewport.classList.add('cuisini-viewportnone');
      } else {
        chat_container.classList.add('cuisini-enlarge');
        viewport.classList.add('cuisini-viewportnone');
        closeviewport.classList.remove('cuisini-viewportnone');
      }
    };
    viewport.onclick = viewport_func;
    closeviewport.onclick = viewport_func;
    viewport_func();
    $('#copy-stat')
      .click(() => {

        let test = 'item\tresult\tstatus\tn\t \tresult\tconfirm\tn\n';
        const list1 = store.statstic.data2.map(item => `${item.result}${item.status}\t${item.result}\t${item.status}\t${item.n}`);
        const list2 = store.statstic.data1.map(item => `${item.result}\t${item.confirm}\t${item.n}`);
        let flag = true,
          index = 0;
        while (flag) {
          const left = list1[index];
          const right = list2[index];
          if (!left && !right) {
            flag = false;
          } else {
            index++;
            test += `${left}`;
            if (right) {
              test += `\t \t${right}`;
            }
            test += '\n';
          }
        }

        const MIMETYPE = 'text/plain';
        const data = [ new ClipboardItem({ [MIMETYPE]: new Blob([ test ], { type: MIMETYPE }) }) ];
        navigator.clipboard.write(data)
          .then(function() {
            alert('复制成功！去试试粘贴到Excel内吧～');
          }, function() {
            alert('不知道怎么回事，再试一次吧！');
            console.error('Unable to write to clipboard. :-(');
          });
      });

    $('#copy-wdm')
      .click(() => {
        const from = $('#datepicker-b')
          .val();
        const to = $('#datepicker-e')
          .val();

        const list = store.statstic.data3.filter(item => [ 'AI_AGREE', 'AI_WEB_AGREE' ].includes(item.confirm));

        let test = '';
        // test += `<span data-lark-atuser="{&quot;userid&quot;:&quot;all&quot;}">@所有人</span>`
        test += `<h3>各位领导，汇报一下截止目前融慧 AI 判图上海大区共创工作的进展情况：</h3>`;
        test += `<div><b>当前进展：</b></div>`;
        let timeStr = `${formatDateMD(from)}至${formatDateMD(to)}`;
        if (from === to) {
          timeStr = formatDateMD(from);
        }
        const all = list.reduce((pre, cur) => {
          return pre + Number(cur.n);
        }, 0);
        test += `<ol><li>${timeStr}上海大区融慧远程任务生成图片<b>${store.statstic.dataStat.总数}</b>张，AI预测合格图片<b>${store.statstic.dataStat.检出数}</b>张（检出率<b>${store.statstic.dataStat.检出率}</b>），员工使用AI完成判图<b>${all}</b>张。`;
        test += `<ul>`;
        list.forEach(item => {
          test += `<li>${item.org_name}-使用AI判图<b>${item.n}张</b></li>`;
        });


        test += `</ul></li>`;
        test += `<div><b>下一步计划：</b></div>`;
        test += `<li>无</li>`;
        test += `<div><b>风险事项：</b></div>`;
        test += `<li>无</li>`;
        test += `</ol>`;

        const MIMETYPE = 'text/html';
        const data = [ new ClipboardItem({ [MIMETYPE]: new Blob([ test ], { type: MIMETYPE }) }) ];
        navigator.clipboard.write(data)
          .then(function() {
            alert('复制成功！');
          }, function() {
            alert('不知道怎么回事，再试一次吧！');
            console.error('Unable to write to clipboard. :-(');
          });

      });

    $('#datepicker-b')
      .datepicker({
        defaultDate: new Date(),
        changeMonth: true,
        numberOfMonths: 1,
        ateFormat: 'yy-mm-dd',
        onClose: function(selectedDate) {
          $('#datepicker-e')
            .datepicker('option', 'minDate', selectedDate);
        }
      });
    $('#datepicker-e')
      .datepicker({
        defaultDate: new Date(),
        changeMonth: true,
        numberOfMonths: 1,
        ateFormat: 'yy-mm-dd',
        onClose: function(selectedDate) {
          $('#datepicker-b')
            .datepicker('option', 'maxDate', selectedDate);
        }
      });
    $('#datepicker-e')
      .datepicker('option', 'dateFormat', 'yy-mm-dd');
    $('#datepicker-b')
      .datepicker('option', 'dateFormat', 'yy-mm-dd');

    $('#datepicker-b')
      .val(formatDate());
    $('#datepicker-e')
      .val(formatDate());
    const tableDom = $('#mainTable');
    table = tableDom
      .dataTable({
        jQueryUI: true
      });
    $('body')
      .click(async (e) => {
        if (e.target && e.target.classList.contains('cuisini-submit-btn')) {
          // console.log({ t: e.target.dataset.exp });
          const obj = { t: e.target.dataset.exp };
          const exp = obj.t.split(',');
          const confirm = window.confirm('确认提交？');
          if (!confirm) return;

          const params = { matchIds: [], noResultIds: [], };

          const ensureResult = EnsureResultFactory(exp);
          Object.entries(store.data)
            .forEach(([ picId, item ]) => {
              // console.log(picId, item);
              const result = ensureResult(item);
              params[result ? 'matchIds' : 'noResultIds'].push(item.id);
            });
          params.matchIds = params.matchIds.join(',');
          params.noResultIds = params.noResultIds.join(',');
          await putData(params);
        }
      });

    handleSearch();


    $('#cuisini-search-btn')
      .click(async () => {
        handleSearch();
      });

  };

  async function handleSearch() {
    const from = $('#datepicker-b')
      .val();
    const to = $('#datepicker-e')
      .val();
    console.log(from, to);
    let data = await getData({ from, to });
    console.log(data);
    let total = Number(data.total);
    const list = data.data;
    // test
    // const total = 300;
    // const list = generateMockData(200).data;
    // const checkLv = percent(list.filter(item => item.result === 'MATCH').length / total);
    // const coverLv = percent(list.length / total);
    // $('#checkLv')
    //   .text(checkLv + '%');
    // $('#totalLv')
    //   .text(total);
    // $('#coverLv')
    //   .text(coverLv + '%');
    // console.log(list);
    const tBodyDom = $('#mainTable tbody');

    const statstic = {
      data1: await getStatisicData({ from, to, ver: '' }),
      data2: await getStatisicDataPerson({ from, to, ver: '' }),
      data3: await groupByConfirmAndQuestOrg({ from, to, ver: '' })
    };
    console.log(statstic);
    store.statstic = statstic;
    const dataStat = {
      总数: 0,
      检出率: 0,
      覆盖率: 0,
      检出数: 0,
      人工数: 0,
      检准率: 0,
    };
    store.statstic.dataStat = dataStat;

    let checkCount = 0;
    let wrongCount = 0;
    let exCheckCount = 0;
    statstic.data2.forEach(item => {
      dataStat.总数 += Number(item.n);
      switch (item.result) {
        case 'MATCH':
          checkCount += Number(item.n);
          dataStat.检出数 += Number(item.n);
          if (item.status === 3) wrongCount += Number(item.n);
          if (item.status !== 0) exCheckCount += Number(item.n);
          break;
        case 'NO_RESULT':
          checkCount += Number(item.n);
          break;
        default:
          break;
      }
    });
    statstic.data1.forEach(item => {
      switch (item.result) {
        case 'MATCH':
          if ([ CONFIRM_MAP.AI_WEB同意, CONFIRM_MAP.AI同意, CONFIRM_MAP.AI_APP同意 ].includes(item.confirm)) {
            dataStat.人工数 += Number(item.n);
          }
          break;
        default:
          break;
      }
    });

    dataStat.覆盖率 = percent(checkCount / dataStat.总数) + '%';
    dataStat.检出率 = percent(dataStat.检出数 / dataStat.总数) + '%';
    dataStat.检准率 = percent(1 - (wrongCount / dataStat.检出数)) + '%';

    console.log(dataStat, checkCount, wrongCount);

    const genTd = (label, value) => `<td class="el-descriptions__cell is-left"><span class="el-descriptions__label des-label">${label}</span><span class="el-descriptions__content">${value}</span></td>`;
    const statTableDom = $('#stat-table tbody');
    statTableDom.empty();
    let currTr = [];
    Object.entries(dataStat)
      .forEach(([ label, value ]) => {
        const template = genTd(label, value);
        currTr.push(template);
        if (currTr.length === 3) {
          statTableDom.append(`<tr>${currTr.join('')}</tr>`);
          currTr = [];
        }
      });

    total = dataStat.总数;

    let htmlText = '';
    const _list = store.statstic.data3.filter(item => [ CONFIRM_MAP.AI_WEB同意, CONFIRM_MAP.AI同意 ].includes(item.confirm));
    const all = getN([ CONFIRM_MAP.AI_WEB同意, CONFIRM_MAP.AI同意, CONFIRM_MAP.AI_APP同意 ]);
    const webAll = getN([ CONFIRM_MAP.AI_WEB同意, CONFIRM_MAP.WEB同意, CONFIRM_MAP.WEB不同意, CONFIRM_MAP.AI_WEB不同意 ]);
    const appAll = getN([ CONFIRM_MAP.APP同意, CONFIRM_MAP.APP不同意, CONFIRM_MAP.APP不同意, CONFIRM_MAP.AI_APP不同意 ]);

    htmlText += `<div>人工AI判图<b>${all}</b>张 web共判图<b>${webAll}</b>张</li></div>`;
    htmlText += `<div>app共判图<b>${appAll}</b>张 判图总量<b>${webAll + appAll}</b>张</li></div>`;
    _list.forEach(item => {
      htmlText += `<li>${item.org_name}:<b>${item.n}张</b></li>`;
    });
    $('#cuisini-stat-wdm')
      .html(htmlText);


    const itemMap = {};
    list.filter(item => item.subResults)
      .forEach(item => {
        const { id, picId, subResults, ver, result } = item;
        // if ([ '1.0' ].includes(ver)) return;
        const obj = itemMap[picId] = itemMap[picId] || {
          cosine: 0,
          phash: 0,
          result: result,
          id
        };
        subResults.forEach((sub) => {
          const _data = JSON.parse(sub.data);
          const val = Math.min(..._data.map(i => i.score));
          switch (sub.model) {
            case 'cosine':
              obj.cosine = val;
              break;
            case 'phash':
              obj.phash = val;
              break;
            default:
              break;
          }
        });
      });
    console.log(table);
    if (table) {
      table.fnClearTable();
      table.fnDestroy();
    }
    store.data = itemMap;
    expList.forEach(exp => {
      const stat = {
        MATCH: 0,
        // MATCH_AVAILABLE: 0,
        NO_RESULT: 0
      };
      let errorCount = 0;
      const ensureResult = EnsureResultFactory(exp);
      Object.entries(itemMap)
        .forEach(([ picId, item ]) => {
          // console.log(picId, item);
          const result = ensureResult(item);
          stat[result ? 'MATCH' : 'NO_RESULT']++;
        });
      // console.log(stat.MATCH, stat.NO_RESULT, total);
      const oldExp = ExpData.find(item => {
        return exp[0] === item[0] && exp[1] === item[1];
      });
      const trDom = `<tr>
            <td>${exp[0]}</td>
            <td>${exp[1]}</td>
            <td>${stat.MATCH}</td>
            <td>${percent((stat.MATCH + exCheckCount) / total)}</td>
            <td>${Number(oldExp[3].replace('%', ''))}</td>
            <td><button data-exp="${exp}" class="btn btn-primary cuisini-submit-btn">使用</button></td>
          </tr>`;
      tBodyDom.append(trDom);
      // console.log(stat.MATCH + stat.NO_RESULT)
      // console.log(exp, stat);
      // console.log(JSON.stringify([ ...exp, percent(stat.MATCH / total2) ]));
    });
    const tableDom = $('#mainTable');
    table = tableDom
      .dataTable({
        jQueryUI: true
      });
  }


  function EnsureResultFactory(exp) {
    return function ensureResult({ cosine, phash }) {
      // console.log(exp, cosine, phash)
      // 检查余弦相似度和图像哈希值相似度是否都高于各自的阈值
      if (cosine >= exp[0] && phash >= exp[1]) {
        return true;
      }
      return false;
    };
  }

  /**
   * 第一次进来的引导提示
   */
  function initCuisini() {
    const cuisini = document.createElement('div');
    const root = document.createElement('div');
    root.id = 'cuisini';
    initCuisiniStyle(cuisini);
    cuisini.appendChild(root);
    document.body.appendChild(cuisini);
    const cuisiniMaskTip = localStorage.getItem('cuisiniMaskTip');
    if (cuisiniMaskTip == null) {
      initGuide(root);
    }
    initChat(root);
  }


  // 初始化全局样式
  function initCuisiniStyle(root) {
    const style = document.createElement('style');
    style.type = 'text/css';
    style.innerText = `
  /* 放大 */
  #cuisini .cuisini-enlarge {
      width: 50%!important;
      height: 100%!important;
      bottom: 0!important;
      right: 0 !important;
  }
  @media only screen and (max-width: 768px){
  #cuisini .cuisini-enlarge {
      width: 100%!important;
      height: 100%!important;
      right: 0 !important;
      bottom: 0!important;
  }
  }

  /* 引导 */

  #cuisini .cuisini-mask {
      position: fixed;
      z-index: 999;
      background-color: transparent;
      height: 100%;
      width: 100%;
      top: 0;
      left: 0;
  }
  #cuisini .cuisini-mask .cuisini-content {
      width: 45px;
      height: 48px;
      box-shadow: 1px 1px 1px 2000px rgba(0,0,0,.6);
      border-radius: 50% 0 0 50%;
      position: absolute;
      right: 0;
      bottom: 38px;
      z-index: 1000;
  }
  #cuisini .cuisini-tips {
      position: fixed;
      bottom: 30px;
      right: 60px;
      padding: 22px 24px 24px;
      border-radius: 6px;
      color: #ffffff;
      font-size: 14px;
      background: #3370FF;
      z-index: 1000;
  }
  #cuisini .cuisini-tips .cuisini-arrow {
      position: absolute;
      background: #3370FF;
      width: 10px;
      height: 10px;
      pointer-events: none;
      transform: rotate(45deg);
      box-sizing: border-box;
      /* left  */
      right: -5px;
      bottom: 33px;
      border-left-color: transparent;
      border-bottom-color: transparent
  }
  #cuisini .cuisini-tips .cuisini-title {
      font-size: 20px;
      font-weight: 500;
      margin-bottom: 8px;
  }
  #cuisini .cuisini-tips .cuisini-button {
      text-align: right;
      margin-top: 24px;
  }
  #cuisini .cuisini-tips .cuisini-button button {
      border-radius: 4px;
      background: #FFF;
      padding: 3px 12px;
      color: #3370FF;
      cursor: pointer;
      outline: none;
      border: none;
  }
  #cuisini .cuisini-tips .cuisini-button button::after{
      border: none;
    }
  #cuisini .cuisini-tips .cuisini-close {
      position: absolute;
      right: 20px;
      top: 20px;
      cursor: pointer;

  }
  #cuisini-chat-container {
        width: 420px;
        height: 600px;
        display:none;
      }
  @media only screen and (max-width: 768px) {
        #cuisini-chat-container {
          width: 100%;
          height: 70%;
          right: 0 !important;
        }
      }

      #cuisini .cuisini-chat-button{
        position: fixed;
        bottom: 30px;
        right: 0;
        cursor: pointer;
    }
    #cuisini #cuisini-chat-container{
        z-index:10000;position: relative;
              border-radius: 8px;
              border: 1px solid #ffffff;
              background: linear-gradient(188deg, rgba(235, 241, 255, 0.20) 39.6%, rgba(231, 249, 255, 0.20) 94.3%), #EFF0F1;
              box-shadow: 0px 4px 8px 0px rgba(31, 35, 41, 0.10);
              position: fixed;bottom: 16px;right: 16px;overflow: hidden;
    }

     #cuisini #cuisini-chat-container .cuisini-operate{
     top: 18px;
     right: 15px;
     position: absolute;
     display: flex;
     align-items: center;
     }
    #cuisini #cuisini-chat-container .cuisini-operate .cuisini-chat-close{
            margin-left:15px;
            cursor: pointer;
    }
    #cuisini #cuisini-chat-container .cuisini-operate .cuisini-openviewport{

            cursor: pointer;
    }
    #cuisini #cuisini-chat-container .cuisini-operate .cuisini-closeviewport{

      cursor: pointer;
    }
    #cuisini #cuisini-chat-container .cuisini-viewportnone{
      display:none;
    }
    #cuisini #cuisini-chat-container #cuisini-chat{
     height:100%;
     width:100%;
     border: none;
}
    #cuisini #cuisini-chat-container {
                animation: appear .4s ease-in-out;
              }
              @keyframes appear {
                from {
                  height: 0;;
                }

                to {
                  height: 600px;
                }
              }`;
    root.appendChild(style);
  }

  function embedChatbot() {

    initCuisini();

  }

  async function getData({ from, to }) {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: `${apiHost}/vpapi/v1/ai/results?from=${from}&to=${to}&ver=1.4`,
        data: {},
        type: 'get',
        headers: {
          ...headers(),
        },
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        success: function(data) {
          console.log(data);
          resolve(data);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          console.error(arguments);
          reject(errorThrown);
        }
      });
    });

  }

  async function getStatisicData({ from, to, ver = '' }) {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: `${apiHost}/vpapi/v1/ai/groupByResultAndConfirm?from=${from}&to=${to}&ver=${ver}`,
        data: {},
        type: 'get',
        headers: {
          ...headers(),
        },
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        success: function(data) {
          console.log(data);
          resolve(data.data);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          console.error(arguments);
          reject(errorThrown);
        }
      });
    });

  }

  async function getStatisicDataPerson({ from, to, ver = '' }) {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: `${apiHost}/vpapi/v1/ai/groupByResultAndPicStatus?from=${from}&to=${to}&ver=${ver}`,
        data: {},
        type: 'get',
        headers: {
          ...headers(),
        },
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        success: function(data) {
          console.log(data);
          resolve(data.data);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          console.error(arguments);
          reject(errorThrown);
        }
      });
    });

  }

  // 按Confirm和任务组织分组
  async function groupByConfirmAndQuestOrg({ from, to, ver = '' }) {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: `${apiHost}/vpapi/v1/ai/groupByConfirmAndQuestOrg?from=${from}&to=${to}&ver=${ver}`,
        data: {},
        type: 'get',
        headers: {
          ...headers(),
        },
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        success: function(data) {
          console.log(data);
          resolve(data.data);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          console.error(arguments);
          reject(errorThrown);
        }
      });
    });

  }


  async function putData({ matchIds, noResultIds, unMatchIds }) {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: `${apiHost}/vpapi/v1/ai/results`,
        data: JSON.stringify({
          matchIds,
          noResultIds,
          unMatchIds
        }),
        type: 'put',
        headers: {
          ...headers(),
        },
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        success: function(data) {
          console.log(data);
          resolve(data);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          console.error(arguments);
          reject(errorThrown);
        }
      });
    });

  }


  function generateMockData(len = 100) {
    // 生成16个元素的数组，每个元素为{score: 0.00到1.00随机数, xy: [0到3, 0到3]的坐标}
    function generateScoresArray() {
      const scores = [];
      for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
          scores.push({
            score: 0.7 + (Math.random() * 0.4), // 生成0到1之间的随机数
            xy: [ i, j ] // 生成0到3之间的随机整数作为xy坐标
          });
        }
      }
      return scores;
    }

    function randomVer() {
      const verList = [ '1.0', '1.1', '1.2', '1.3' ];
      return verList[Math.floor(Math.random() * 4)];
    }

    function randomResult() {
      const resultList = [ 'MATCH', 'NO_RESULT' ];
      return resultList[Math.floor(Math.random() * 2)];
    }

    // 生成subResults数组，包含两个固定model的元素
    function generateSubResults() {

      const ver = randomVer();
      return [
        {
          data: JSON.stringify(generateScoresArray()), // 将生成的数组转换为JSON字符串
          id: 0,
          model: 'phash',
          ver: ver
        },
        {
          data: JSON.stringify(generateScoresArray()), // 同上
          id: 1,
          model: 'cosine',
          ver: ver
        }
      ];
    }

    function generateItem(index) {

      return {
        id: 0,
        model: '',
        picId: index,
        subResults: generateSubResults(),
        time: '',
        result: randomResult(),
        ver: randomVer()
      };
    }

    const list = [];
    for (let index = 0; index < len; index++) {
      list.push(generateItem(index));
    }

    // 生成最终的mock数据
    return {
      code: 0,
      data: list,
      error: false, // 或true, 根据需要调整
      message: '',
      pageCount: 0,
      pageNum: 0,
      returnType: '',
      success: true, // 或false, 根据需要调整
      total: 0
    };
  }

  /**
   * 百分数 保留两位小数
   */
  function percent(num) {
    return Number((num * 100).toFixed(2));
  }

  function formatDateMD(dateStr) {
    const date = new Date(dateStr);
    const month = (date.getMonth() + 1).toString()
      .padStart(2, '0');
    const day = date.getDate()
      .toString()
      .padStart(2, '0');
    return `${month}月${day}日`;
  }

  function getN(confirms = [], notIn = false) {
    const _list = notIn ? store.statstic.data3.filter(item => !confirms.includes(item.confirm)) : store.statstic.data3.filter(item => confirms.includes(item.confirm));
    return _list.reduce((pre, cur) => {
      return pre + Number(cur.n);
    }, 0);
  }

  window.onload = embedChatbot;

})();
